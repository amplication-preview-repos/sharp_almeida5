/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ExcelTable as PrismaExcelTable } from "@prisma/client";

export class ExcelTableServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExcelTableCountArgs, "select">
  ): Promise<number> {
    return this.prisma.excelTable.count(args);
  }

  async excelTables(
    args: Prisma.ExcelTableFindManyArgs
  ): Promise<PrismaExcelTable[]> {
    return this.prisma.excelTable.findMany(args);
  }
  async excelTable(
    args: Prisma.ExcelTableFindUniqueArgs
  ): Promise<PrismaExcelTable | null> {
    return this.prisma.excelTable.findUnique(args);
  }
  async createExcelTable(
    args: Prisma.ExcelTableCreateArgs
  ): Promise<PrismaExcelTable> {
    return this.prisma.excelTable.create(args);
  }
  async updateExcelTable(
    args: Prisma.ExcelTableUpdateArgs
  ): Promise<PrismaExcelTable> {
    return this.prisma.excelTable.update(args);
  }
  async deleteExcelTable(
    args: Prisma.ExcelTableDeleteArgs
  ): Promise<PrismaExcelTable> {
    return this.prisma.excelTable.delete(args);
  }
}
