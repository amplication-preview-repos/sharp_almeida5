/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ExcelTable } from "./ExcelTable";
import { ExcelTableCountArgs } from "./ExcelTableCountArgs";
import { ExcelTableFindManyArgs } from "./ExcelTableFindManyArgs";
import { ExcelTableFindUniqueArgs } from "./ExcelTableFindUniqueArgs";
import { CreateExcelTableArgs } from "./CreateExcelTableArgs";
import { UpdateExcelTableArgs } from "./UpdateExcelTableArgs";
import { DeleteExcelTableArgs } from "./DeleteExcelTableArgs";
import { ExcelTableService } from "../excelTable.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ExcelTable)
export class ExcelTableResolverBase {
  constructor(
    protected readonly service: ExcelTableService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ExcelTable",
    action: "read",
    possession: "any",
  })
  async _excelTablesMeta(
    @graphql.Args() args: ExcelTableCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ExcelTable])
  @nestAccessControl.UseRoles({
    resource: "ExcelTable",
    action: "read",
    possession: "any",
  })
  async excelTables(
    @graphql.Args() args: ExcelTableFindManyArgs
  ): Promise<ExcelTable[]> {
    return this.service.excelTables(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ExcelTable, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ExcelTable",
    action: "read",
    possession: "own",
  })
  async excelTable(
    @graphql.Args() args: ExcelTableFindUniqueArgs
  ): Promise<ExcelTable | null> {
    const result = await this.service.excelTable(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExcelTable)
  @nestAccessControl.UseRoles({
    resource: "ExcelTable",
    action: "create",
    possession: "any",
  })
  async createExcelTable(
    @graphql.Args() args: CreateExcelTableArgs
  ): Promise<ExcelTable> {
    return await this.service.createExcelTable({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExcelTable)
  @nestAccessControl.UseRoles({
    resource: "ExcelTable",
    action: "update",
    possession: "any",
  })
  async updateExcelTable(
    @graphql.Args() args: UpdateExcelTableArgs
  ): Promise<ExcelTable | null> {
    try {
      return await this.service.updateExcelTable({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExcelTable)
  @nestAccessControl.UseRoles({
    resource: "ExcelTable",
    action: "delete",
    possession: "any",
  })
  async deleteExcelTable(
    @graphql.Args() args: DeleteExcelTableArgs
  ): Promise<ExcelTable | null> {
    try {
      return await this.service.deleteExcelTable(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
